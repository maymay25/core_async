module CoreAsync

  module AlbumResendWorkerMethods

    include CoreHelper

    def perform(action,*args)
      method(action).call(*args)
    end

    def album_resend(album_ids,uid)
      album_ids.each do |album_id|
        ts = TrackSet.shard(album_id).where(id: album_id).first
        next if ts.nil?

        ts_diff_hash = {uid: uid, op_type: 2}
        album_copy = TrackSet.create( ts.attributes.symbolize_keys.merge(ts_diff_hash) )

        $counter_client.incr(Settings.counter.user.albums, album_copy.uid, 1)

        new_record_ids = []

        record_diff_hash = {op_type: 2,uid: album_copy.uid,album_id:album_copy.id}
        TrackRecord.shard(ts.uid).where(uid: ts.uid, album_id: ts.id).each do |record|

          record_copy = TrackRecord.create(record.attributes.symbolize_keys.merge(record_diff_hash))

          $counter_client.incr(Settings.counter.album.tracks, album_copy.id, 1)

          new_record_ids << record_copy.id
        end

        album_copy.records_order = new_record_ids.join(',')
        album_copy.save
      end # album_ids.each do |album_id|
      logger.info "resend #{album_ids.inspect} to #{uid}"
    rescue Exception => e
      logger.error "album_resend #{e.class}: #{e.message} \n #{e.backtrace.join("\n")}"
      raise e
    end

    private

    def logger
      current_day = Time.now.strftime('%Y-%m-%d')
      if (@@day||=nil) != current_day
        @@logger = ::Logger.new(Sinarey.root+"/log/sidekiq/album_recend#{current_day}.log")
        @@logger.level = Logger::INFO
        @@day = current_day
      end
      @@logger
    end

  end

end