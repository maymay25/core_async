module CoreAsync

  module MessageCreatedWorkerMethods

    include CoreHelper

    def perform(action,*args)
      method(action).call(*args)
    end

    def message_created(uid,chat_id)

      chat = Chat.shard(uid).where(id: chat_id).first

      return if chat.nil?

      return if BlackUser.where(uid: chat.with_uid, black_uid: uid).any?

      to_ps = PersonalSetting.where(uid: chat.with_uid).first

      is_notice = to_ps ? to_ps.notice_message : true

      $counter_client.incr(Settings.counter.user.new_message, chat.with_uid, 1) if is_notice
      
      $rabbitmq_connection.create_channel.queue('pns-standard-server.unicastmessage.queue', durable: true).publish(oj_dump({
        type: 5, 
        to_uid: chat.with_uid,
        id: chat.id,
        content: chat.content,
        from_uid: chat.uid,
        from_nickname: chat.nickname,
        badge: get_badge(chat.with_uid),
        message_content: "\"#{chat.nickname}\"给您发来私信:#{chat.content}"
      }), content_type: 'text/plain')

      # 小编聊天
      editor = Editor.where(uid: chat.uid).first
      if editor
        EditorChat.create(is_in: false, uid: editor.uid, with_uid: chat.with_uid, with_nickname: chat.with_nickname, content: chat.content)
      end

      with_editor = Editor.where(uid: chat.with_uid).first
      if with_editor
        EditorChat.create(is_in: true, uid: with_editor.uid, with_uid: chat.uid, with_nickname: chat.nickname, content: chat.content)
      end

      logger.info "message_created #{uid} #{chat_id}"

    rescue Exception => e
      logger.error "message_created #{e.class}: #{e.message} \n #{e.backtrace.join("\n")}"
      raise e
    end

    private

    def logger
      current_day = Time.now.strftime('%Y-%m-%d')
      if (@@day||=nil) != current_day
        @@logger = ::Logger.new(Sinarey.root+"/log/sidekiq/message_created#{current_day}.log")
        @@logger.level = Logger::INFO
        @@day = current_day
      end
      @@logger
    end

  end

end